

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "AppTracker\Web.config"
//     Connection String Name: "AppList"
//     Connection String:      "Data Source=SQLD00C1N\DB02, 17400;Initial Catalog=db_UAB_AppList;Integrated Security=True"
// ------------------------------------------------------------------------------------------------
// Database Edition       : Enterprise Edition (64-bit)
// Database Engine Edition: Enterprise

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.5
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace AppTracker.DataConnection.AppList
{
    using System.Linq;

    #region Unit of work

    public interface IAppListDBContext : System.IDisposable
    {
        System.Data.Entity.DbSet<Application> Applications { get; set; } // Applications
        System.Data.Entity.DbSet<AspNetPermission> AspNetPermissions { get; set; } // AspNetPermissions
        System.Data.Entity.DbSet<AspNetRole> AspNetRoles { get; set; } // AspNetRoles
        System.Data.Entity.DbSet<AspNetUser> AspNetUsers { get; set; } // AspNetUsers
        System.Data.Entity.DbSet<AspNetUserClaim> AspNetUserClaims { get; set; } // AspNetUserClaims
        System.Data.Entity.DbSet<AspNetUserLogin> AspNetUserLogins { get; set; } // AspNetUserLogins
        System.Data.Entity.DbSet<Contact> Contacts { get; set; } // Contacts
        System.Data.Entity.DbSet<ContactType> ContactTypes { get; set; } // ContactTypes
        System.Data.Entity.DbSet<FileStore> FileStores { get; set; } // FileStores
        System.Data.Entity.DbSet<TouchNetAddEmail> TouchNetAddEmails { get; set; } // TouchNetAddEmails
        System.Data.Entity.DbSet<UserProfile> UserProfiles { get; set; } // UserProfile

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
        System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
        System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }
        System.Data.Entity.Database Database { get; }
        System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity);
        System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors();
        System.Data.Entity.DbSet Set(System.Type entityType);
        System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();
    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class AppListDBContext : System.Data.Entity.DbContext, IAppListDBContext
    {
        public System.Data.Entity.DbSet<Application> Applications { get; set; } // Applications
        public System.Data.Entity.DbSet<AspNetPermission> AspNetPermissions { get; set; } // AspNetPermissions
        public System.Data.Entity.DbSet<AspNetRole> AspNetRoles { get; set; } // AspNetRoles
        public System.Data.Entity.DbSet<AspNetUser> AspNetUsers { get; set; } // AspNetUsers
        public System.Data.Entity.DbSet<AspNetUserClaim> AspNetUserClaims { get; set; } // AspNetUserClaims
        public System.Data.Entity.DbSet<AspNetUserLogin> AspNetUserLogins { get; set; } // AspNetUserLogins
        public System.Data.Entity.DbSet<Contact> Contacts { get; set; } // Contacts
        public System.Data.Entity.DbSet<ContactType> ContactTypes { get; set; } // ContactTypes
        public System.Data.Entity.DbSet<FileStore> FileStores { get; set; } // FileStores
        public System.Data.Entity.DbSet<TouchNetAddEmail> TouchNetAddEmails { get; set; } // TouchNetAddEmails
        public System.Data.Entity.DbSet<UserProfile> UserProfiles { get; set; } // UserProfile

        static AppListDBContext()
        {
            System.Data.Entity.Database.SetInitializer<AppListDBContext>(null);
        }

        public AppListDBContext()
            : base("Name=AppList")
        {
        }

        public AppListDBContext(string connectionString)
            : base(connectionString)
        {
        }

        public AppListDBContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public AppListDBContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public AppListDBContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new ApplicationConfiguration());
            modelBuilder.Configurations.Add(new AspNetPermissionConfiguration());
            modelBuilder.Configurations.Add(new AspNetRoleConfiguration());
            modelBuilder.Configurations.Add(new AspNetUserConfiguration());
            modelBuilder.Configurations.Add(new AspNetUserClaimConfiguration());
            modelBuilder.Configurations.Add(new AspNetUserLoginConfiguration());
            modelBuilder.Configurations.Add(new ContactConfiguration());
            modelBuilder.Configurations.Add(new ContactTypeConfiguration());
            modelBuilder.Configurations.Add(new FileStoreConfiguration());
            modelBuilder.Configurations.Add(new TouchNetAddEmailConfiguration());
            modelBuilder.Configurations.Add(new UserProfileConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new ApplicationConfiguration(schema));
            modelBuilder.Configurations.Add(new AspNetPermissionConfiguration(schema));
            modelBuilder.Configurations.Add(new AspNetRoleConfiguration(schema));
            modelBuilder.Configurations.Add(new AspNetUserConfiguration(schema));
            modelBuilder.Configurations.Add(new AspNetUserClaimConfiguration(schema));
            modelBuilder.Configurations.Add(new AspNetUserLoginConfiguration(schema));
            modelBuilder.Configurations.Add(new ContactConfiguration(schema));
            modelBuilder.Configurations.Add(new ContactTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new FileStoreConfiguration(schema));
            modelBuilder.Configurations.Add(new TouchNetAddEmailConfiguration(schema));
            modelBuilder.Configurations.Add(new UserProfileConfiguration(schema));
            return modelBuilder;
        }
    }
    #endregion

    #region Database context factory

    public class AppListDBContextFactory : System.Data.Entity.Infrastructure.IDbContextFactory<AppListDBContext>
    {
        public AppListDBContext Create()
        {
            return new AppListDBContext();
        }
    }

    #endregion

    #region Fake Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class FakeAppListDBContext : IAppListDBContext
    {
        public System.Data.Entity.DbSet<Application> Applications { get; set; }
        public System.Data.Entity.DbSet<AspNetPermission> AspNetPermissions { get; set; }
        public System.Data.Entity.DbSet<AspNetRole> AspNetRoles { get; set; }
        public System.Data.Entity.DbSet<AspNetUser> AspNetUsers { get; set; }
        public System.Data.Entity.DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public System.Data.Entity.DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public System.Data.Entity.DbSet<Contact> Contacts { get; set; }
        public System.Data.Entity.DbSet<ContactType> ContactTypes { get; set; }
        public System.Data.Entity.DbSet<FileStore> FileStores { get; set; }
        public System.Data.Entity.DbSet<TouchNetAddEmail> TouchNetAddEmails { get; set; }
        public System.Data.Entity.DbSet<UserProfile> UserProfiles { get; set; }

        public FakeAppListDBContext()
        {
            Applications = new FakeDbSet<Application>("Id");
            AspNetPermissions = new FakeDbSet<AspNetPermission>("PermissionId");
            AspNetRoles = new FakeDbSet<AspNetRole>("Id");
            AspNetUsers = new FakeDbSet<AspNetUser>("Id");
            AspNetUserClaims = new FakeDbSet<AspNetUserClaim>("Id");
            AspNetUserLogins = new FakeDbSet<AspNetUserLogin>("LoginProvider", "ProviderKey", "UserId");
            Contacts = new FakeDbSet<Contact>("Id");
            ContactTypes = new FakeDbSet<ContactType>("Id");
            FileStores = new FakeDbSet<FileStore>("FileStoreId");
            TouchNetAddEmails = new FakeDbSet<TouchNetAddEmail>("Id");
            UserProfiles = new FakeDbSet<UserProfile>("UserId");
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        private System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        private System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }

    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override System.Collections.Generic.IEnumerable<TEntity> RemoveRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return System.Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return System.Activator.CreateInstance<TDerivedEntity>();
        }

        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        System.Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        System.Linq.Expressions.Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TElement>(expression);
        }

        public object Execute(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute(expression));
        }

        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression)
            : base(expression)
        { }

        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T>
    {
        private readonly System.Collections.Generic.IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // Applications
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class Application
    {
        public int Id { get; set; } // ID (Primary key)
        public string Name { get; set; } // Name (length: 300)
        public string Description { get; set; } // Description (length: 500)
        public string ProductionUrl { get; set; } // ProductionURL (length: 300)
        public string FriendlyUrl { get; set; } // FriendlyURL (length: 300)
        public string TestUrl { get; set; } // TestURL (length: 300)
        public string Database { get; set; } // Database (length: 300)
        public string DatabaseVersion { get; set; } // DatabaseVersion (length: 100)
        public string DatabaseInstance { get; set; } // DatabaseInstance (length: 300)
        public string TestDatabase { get; set; } // TestDatabase (length: 300)
        public string WebServer { get; set; } // WebServer (length: 300)
        public string MvcVersion { get; set; } // MVCVersion (length: 100)
        public string NetVersion { get; set; } // NETVersion (length: 100)
        public string AppPoolName { get; set; } // AppPoolName (length: 100)
        public string FilePath { get; set; } // FilePath (length: 300)
        public string TfsPath { get; set; } // TFSPath (length: 300)
        public System.DateTime? EndDateTime { get; set; } // EndDateTime
        public string DevIp { get; set; } // DevIP (length: 500)
        public string ProdIp { get; set; } // ProdIP (length: 500)

        // Reverse navigation

        /// <summary>
        /// Child Contacts (Many-to-Many) mapped by table [ContactApplications]
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Contact> Contacts { get; set; } // Many to many mapping

        public Application()
        {
            Contacts = new System.Collections.Generic.List<Contact>();
        }
    }

    // AspNetPermissions
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class AspNetPermission
    {
        public string PermissionId { get; set; } // PermissionId (Primary key) (length: 128)
        public string PermissionName { get; set; } // PermissionName (length: 256)

        // Reverse navigation

        /// <summary>
        /// Child AspNetUsers (Many-to-Many) mapped by table [AspNetUserPermissions]
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AspNetUser> AspNetUsers { get; set; } // Many to many mapping

        public AspNetPermission()
        {
            AspNetUsers = new System.Collections.Generic.List<AspNetUser>();
        }
    }

    // AspNetRoles
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class AspNetRole
    {
        public string Id { get; set; } // Id (Primary key) (length: 128)
        public string Name { get; set; } // Name (length: 256)

        // Reverse navigation

        /// <summary>
        /// Child AspNetUsers (Many-to-Many) mapped by table [AspNetUserRoles]
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AspNetUser> AspNetUsers { get; set; } // Many to many mapping

        public AspNetRole()
        {
            AspNetUsers = new System.Collections.Generic.List<AspNetUser>();
        }
    }

    // AspNetUsers
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class AspNetUser
    {
        public string Id { get; set; } // Id (Primary key) (length: 128)
        public string Email { get; set; } // Email (length: 256)
        public bool EmailConfirmed { get; set; } // EmailConfirmed
        public string PasswordHash { get; set; } // PasswordHash
        public string SecurityStamp { get; set; } // SecurityStamp
        public string PhoneNumber { get; set; } // PhoneNumber
        public bool PhoneNumberConfirmed { get; set; } // PhoneNumberConfirmed
        public bool TwoFactorEnabled { get; set; } // TwoFactorEnabled
        public System.DateTime? LockoutEndDateUtc { get; set; } // LockoutEndDateUtc
        public bool LockoutEnabled { get; set; } // LockoutEnabled
        public int AccessFailedCount { get; set; } // AccessFailedCount
        public string UserName { get; set; } // UserName (length: 256)
        public string FullName { get; set; } // FullName (length: 255)
        public bool DesignatedUser { get; set; } // DesignatedUser

        // Reverse navigation

        /// <summary>
        /// Child AspNetPermissions (Many-to-Many) mapped by table [AspNetUserPermissions]
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AspNetPermission> AspNetPermissions { get; set; } // Many to many mapping
        /// <summary>
        /// Child AspNetRoles (Many-to-Many) mapped by table [AspNetUserRoles]
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AspNetRole> AspNetRoles { get; set; } // Many to many mapping
        /// <summary>
        /// Child AspNetUserClaims where [AspNetUserClaims].[UserId] point to this entity (FK_dbo.AspNetUserClaims_dbo.AspNetUsers_UserId)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AspNetUserClaim> AspNetUserClaims { get; set; } // AspNetUserClaims.FK_dbo.AspNetUserClaims_dbo.AspNetUsers_UserId
        /// <summary>
        /// Child AspNetUserLogins where [AspNetUserLogins].[UserId] point to this entity (FK_dbo.AspNetUserLogins_dbo.AspNetUsers_UserId)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AspNetUserLogin> AspNetUserLogins { get; set; } // AspNetUserLogins.FK_dbo.AspNetUserLogins_dbo.AspNetUsers_UserId

        public AspNetUser()
        {
            AspNetUserClaims = new System.Collections.Generic.List<AspNetUserClaim>();
            AspNetUserLogins = new System.Collections.Generic.List<AspNetUserLogin>();
            AspNetPermissions = new System.Collections.Generic.List<AspNetPermission>();
            AspNetRoles = new System.Collections.Generic.List<AspNetRole>();
        }
    }

    // AspNetUserClaims
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class AspNetUserClaim
    {
        public int Id { get; set; } // Id (Primary key)
        public string UserId { get; set; } // UserId (length: 128)
        public string ClaimType { get; set; } // ClaimType
        public string ClaimValue { get; set; } // ClaimValue

        // Foreign keys

        /// <summary>
        /// Parent AspNetUser pointed by [AspNetUserClaims].([UserId]) (FK_dbo.AspNetUserClaims_dbo.AspNetUsers_UserId)
        /// </summary>
        public virtual AspNetUser AspNetUser { get; set; } // FK_dbo.AspNetUserClaims_dbo.AspNetUsers_UserId
    }

    // AspNetUserLogins
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class AspNetUserLogin
    {
        public string LoginProvider { get; set; } // LoginProvider (Primary key) (length: 128)
        public string ProviderKey { get; set; } // ProviderKey (Primary key) (length: 128)
        public string UserId { get; set; } // UserId (Primary key) (length: 128)

        // Foreign keys

        /// <summary>
        /// Parent AspNetUser pointed by [AspNetUserLogins].([UserId]) (FK_dbo.AspNetUserLogins_dbo.AspNetUsers_UserId)
        /// </summary>
        public virtual AspNetUser AspNetUser { get; set; } // FK_dbo.AspNetUserLogins_dbo.AspNetUsers_UserId
    }

    // Contacts
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class Contact
    {
        public int Id { get; set; } // id (Primary key)
        public string FirstName { get; set; } // FirstName
        public string LastName { get; set; } // LastName
        public string Email { get; set; } // Email
        public string Phone { get; set; } // Phone
        public string BlazerId { get; set; } // BlazerID
        public int? ContactTypeId { get; set; } // ContactTypeId

        // Reverse navigation

        /// <summary>
        /// Child Applications (Many-to-Many) mapped by table [ContactApplications]
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Application> Applications { get; set; } // Many to many mapping

        // Foreign keys

        /// <summary>
        /// Parent ContactType pointed by [Contacts].([ContactTypeId]) (FK_dbo.Contacts_dbo.ContactTypes_ContactTypeId)
        /// </summary>
        public virtual ContactType ContactType { get; set; } // FK_dbo.Contacts_dbo.ContactTypes_ContactTypeId

        public Contact()
        {
            Applications = new System.Collections.Generic.List<Application>();
        }
    }

    // ContactTypes
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class ContactType
    {
        public int Id { get; set; } // Id (Primary key)
        public string ContactTypeDesc { get; set; } // ContactTypeDesc

        // Reverse navigation

        /// <summary>
        /// Child Contacts where [Contacts].[ContactTypeId] point to this entity (FK_dbo.Contacts_dbo.ContactTypes_ContactTypeId)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Contact> Contacts { get; set; } // Contacts.FK_dbo.Contacts_dbo.ContactTypes_ContactTypeId

        public ContactType()
        {
            Contacts = new System.Collections.Generic.List<Contact>();
        }
    }

    // FileStores
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class FileStore
    {
        public int FileStoreId { get; set; } // FileStoreId (Primary key)
        public int? ApplicationId { get; set; } // ApplicationId
        public byte[] FileBytes { get; set; } // FileBytes
        public string FileName { get; set; } // FileName (length: 200)
        public decimal FileSize { get; set; } // FileSize
        public System.Guid FileStoreGuid { get; set; } // FileStoreGuid
        public System.DateTime? AddDate { get; set; } // AddDate
        public System.DateTime? EndDate { get; set; } // EndDate
        public System.DateTime? ModifyDate { get; set; } // ModifyDate
        public string ModifyUser { get; set; } // ModifyUser (length: 100)
    }

    // The table 'newData' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // newData
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class NewData
    {
        public string Name { get; set; } // Name (length: 255)
        public string Action { get; set; } // Action (length: 255)
        public string AssignedTo { get; set; } // Assigned To (length: 255)
        public string Description { get; set; } // Description (length: 255)
        public string ProductionUrl { get; set; } // ProductionURL (length: 255)
        public string FriendlyUrl { get; set; } // FriendlyURL (length: 255)
        public string Database { get; set; } // Database (length: 255)
        public string DatabaseInstance { get; set; } // DatabaseInstance (length: 255)
        public string DatabaseVersion { get; set; } // DatabaseVersion (length: 255)
        public string WebServer { get; set; } // WebServer (length: 255)
        public string MvcVersion { get; set; } // MVCVersion (length: 255)
        public string NetVersion { get; set; } // NETVersion
        public string AppPoolName { get; set; } // AppPoolName (length: 255)
        public string FilePath { get; set; } // FilePath (length: 255)
        public string DevTestPath { get; set; } // DevTestPath (length: 255)
        public string TfsPath { get; set; } // TFSPath (length: 255)
        public string Description2 { get; set; } // Description2 (length: 255)
    }

    // The table 'Touchnet2016-02-22' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // Touchnet2016-02-22
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class Touchnet20160222
    {
        public string Username { get; set; } // Username (length: 255)
        public string Realm { get; set; } // Realm (length: 255)
        public string Created { get; set; } // Created (length: 255)
        public string LastLogin { get; set; } // Last Login (length: 255)
        public string Modified { get; set; } // Modified (length: 255)
        public string Status { get; set; } // Status (length: 255)
        public string Roles { get; set; } // Roles (length: 255)
        public string EmailAddress { get; set; } // Email Address (length: 255)
    }

    // TouchNetAddEmails
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class TouchNetAddEmail
    {
        public int Id { get; set; } // id (Primary key)
        public string Email { get; set; } // email (length: 150)
    }

    // The table 'vwTouchnetEmailList' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // vwTouchnetEmailList
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class VwTouchnetEmailList
    {
        public string EmailAddress { get; set; } // email address (length: 255)
    }

    // UserProfile
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class UserProfile
    {
        public int UserId { get; set; } // UserId (Primary key)
        public string UserName { get; set; } // UserName (length: 56)
    }

    #endregion

    #region POCO Configuration

    // Applications
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class ApplicationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Application>
    {
        public ApplicationConfiguration()
            : this("dbo")
        {
        }

        public ApplicationConfiguration(string schema)
        {
            ToTable("Applications", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsOptional().HasMaxLength(300);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.ProductionUrl).HasColumnName(@"ProductionURL").HasColumnType("nvarchar").IsOptional().HasMaxLength(300);
            Property(x => x.FriendlyUrl).HasColumnName(@"FriendlyURL").HasColumnType("nvarchar").IsOptional().HasMaxLength(300);
            Property(x => x.TestUrl).HasColumnName(@"TestURL").HasColumnType("nvarchar").IsOptional().HasMaxLength(300);
            Property(x => x.Database).HasColumnName(@"Database").HasColumnType("nvarchar").IsOptional().HasMaxLength(300);
            Property(x => x.DatabaseVersion).HasColumnName(@"DatabaseVersion").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.DatabaseInstance).HasColumnName(@"DatabaseInstance").HasColumnType("nvarchar").IsOptional().HasMaxLength(300);
            Property(x => x.TestDatabase).HasColumnName(@"TestDatabase").HasColumnType("nvarchar").IsOptional().HasMaxLength(300);
            Property(x => x.WebServer).HasColumnName(@"WebServer").HasColumnType("nvarchar").IsOptional().HasMaxLength(300);
            Property(x => x.MvcVersion).HasColumnName(@"MVCVersion").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.NetVersion).HasColumnName(@"NETVersion").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.AppPoolName).HasColumnName(@"AppPoolName").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.FilePath).HasColumnName(@"FilePath").HasColumnType("nvarchar").IsOptional().HasMaxLength(300);
            Property(x => x.TfsPath).HasColumnName(@"TFSPath").HasColumnType("nvarchar").IsOptional().HasMaxLength(300);
            Property(x => x.EndDateTime).HasColumnName(@"EndDateTime").HasColumnType("datetime").IsOptional();
            Property(x => x.DevIp).HasColumnName(@"DevIP").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.ProdIp).HasColumnName(@"ProdIP").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            HasMany(t => t.Contacts).WithMany(t => t.Applications).Map(m =>
            {
                m.ToTable("ContactApplications", "dbo");
                m.MapLeftKey("Application_ID");
                m.MapRightKey("Contact_id");
            });
        }
    }

    // AspNetPermissions
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class AspNetPermissionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AspNetPermission>
    {
        public AspNetPermissionConfiguration()
            : this("dbo")
        {
        }

        public AspNetPermissionConfiguration(string schema)
        {
            ToTable("AspNetPermissions", schema);
            HasKey(x => x.PermissionId);

            Property(x => x.PermissionId).HasColumnName(@"PermissionId").HasColumnType("nvarchar").IsRequired().HasMaxLength(128).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PermissionName).HasColumnName(@"PermissionName").HasColumnType("nvarchar").IsRequired().HasMaxLength(256);
            HasMany(t => t.AspNetUsers).WithMany(t => t.AspNetPermissions).Map(m =>
            {
                m.ToTable("AspNetUserPermissions", "dbo");
                m.MapLeftKey("PermissionId");
                m.MapRightKey("UserId");
            });
        }
    }

    // AspNetRoles
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class AspNetRoleConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AspNetRole>
    {
        public AspNetRoleConfiguration()
            : this("dbo")
        {
        }

        public AspNetRoleConfiguration(string schema)
        {
            ToTable("AspNetRoles", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("nvarchar").IsRequired().HasMaxLength(128).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(256);
            HasMany(t => t.AspNetUsers).WithMany(t => t.AspNetRoles).Map(m =>
            {
                m.ToTable("AspNetUserRoles", "dbo");
                m.MapLeftKey("RoleId");
                m.MapRightKey("UserId");
            });
        }
    }

    // AspNetUsers
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class AspNetUserConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AspNetUser>
    {
        public AspNetUserConfiguration()
            : this("dbo")
        {
        }

        public AspNetUserConfiguration(string schema)
        {
            ToTable("AspNetUsers", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("nvarchar").IsRequired().HasMaxLength(128).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Email).HasColumnName(@"Email").HasColumnType("nvarchar").IsOptional().HasMaxLength(256);
            Property(x => x.EmailConfirmed).HasColumnName(@"EmailConfirmed").HasColumnType("bit").IsRequired();
            Property(x => x.PasswordHash).HasColumnName(@"PasswordHash").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.SecurityStamp).HasColumnName(@"SecurityStamp").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.PhoneNumber).HasColumnName(@"PhoneNumber").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.PhoneNumberConfirmed).HasColumnName(@"PhoneNumberConfirmed").HasColumnType("bit").IsRequired();
            Property(x => x.TwoFactorEnabled).HasColumnName(@"TwoFactorEnabled").HasColumnType("bit").IsRequired();
            Property(x => x.LockoutEndDateUtc).HasColumnName(@"LockoutEndDateUtc").HasColumnType("datetime").IsOptional();
            Property(x => x.LockoutEnabled).HasColumnName(@"LockoutEnabled").HasColumnType("bit").IsRequired();
            Property(x => x.AccessFailedCount).HasColumnName(@"AccessFailedCount").HasColumnType("int").IsRequired();
            Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("nvarchar").IsRequired().HasMaxLength(256);
            Property(x => x.FullName).HasColumnName(@"FullName").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.DesignatedUser).HasColumnName(@"DesignatedUser").HasColumnType("bit").IsRequired();
        }
    }

    // AspNetUserClaims
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class AspNetUserClaimConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AspNetUserClaim>
    {
        public AspNetUserClaimConfiguration()
            : this("dbo")
        {
        }

        public AspNetUserClaimConfiguration(string schema)
        {
            ToTable("AspNetUserClaims", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("nvarchar").IsRequired().HasMaxLength(128);
            Property(x => x.ClaimType).HasColumnName(@"ClaimType").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.ClaimValue).HasColumnName(@"ClaimValue").HasColumnType("nvarchar(max)").IsOptional();

            // Foreign keys
            HasRequired(a => a.AspNetUser).WithMany(b => b.AspNetUserClaims).HasForeignKey(c => c.UserId); // FK_dbo.AspNetUserClaims_dbo.AspNetUsers_UserId
        }
    }

    // AspNetUserLogins
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class AspNetUserLoginConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AspNetUserLogin>
    {
        public AspNetUserLoginConfiguration()
            : this("dbo")
        {
        }

        public AspNetUserLoginConfiguration(string schema)
        {
            ToTable("AspNetUserLogins", schema);
            HasKey(x => new { x.LoginProvider, x.ProviderKey, x.UserId });

            Property(x => x.LoginProvider).HasColumnName(@"LoginProvider").HasColumnType("nvarchar").IsRequired().HasMaxLength(128).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProviderKey).HasColumnName(@"ProviderKey").HasColumnType("nvarchar").IsRequired().HasMaxLength(128).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("nvarchar").IsRequired().HasMaxLength(128).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.AspNetUser).WithMany(b => b.AspNetUserLogins).HasForeignKey(c => c.UserId); // FK_dbo.AspNetUserLogins_dbo.AspNetUsers_UserId
        }
    }

    // Contacts
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class ContactConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Contact>
    {
        public ContactConfiguration()
            : this("dbo")
        {
        }

        public ContactConfiguration(string schema)
        {
            ToTable("Contacts", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.LastName).HasColumnName(@"LastName").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Email).HasColumnName(@"Email").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Phone).HasColumnName(@"Phone").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.BlazerId).HasColumnName(@"BlazerID").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.ContactTypeId).HasColumnName(@"ContactTypeId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.ContactType).WithMany(b => b.Contacts).HasForeignKey(c => c.ContactTypeId).WillCascadeOnDelete(false); // FK_dbo.Contacts_dbo.ContactTypes_ContactTypeId
        }
    }

    // ContactTypes
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class ContactTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ContactType>
    {
        public ContactTypeConfiguration()
            : this("dbo")
        {
        }

        public ContactTypeConfiguration(string schema)
        {
            ToTable("ContactTypes", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ContactTypeDesc).HasColumnName(@"ContactTypeDesc").HasColumnType("nvarchar(max)").IsOptional();
        }
    }

    // FileStores
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class FileStoreConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<FileStore>
    {
        public FileStoreConfiguration()
            : this("dbo")
        {
        }

        public FileStoreConfiguration(string schema)
        {
            ToTable("FileStores", schema);
            HasKey(x => x.FileStoreId);

            Property(x => x.FileStoreId).HasColumnName(@"FileStoreId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ApplicationId).HasColumnName(@"ApplicationId").HasColumnType("int").IsOptional();
            Property(x => x.FileBytes).HasColumnName(@"FileBytes").HasColumnType("varbinary(max)").IsRequired();
            Property(x => x.FileName).HasColumnName(@"FileName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(200);
            Property(x => x.FileSize).HasColumnName(@"FileSize").HasColumnType("decimal").IsRequired().HasPrecision(10, 2);
            Property(x => x.FileStoreGuid).HasColumnName(@"FileStoreGuid").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.AddDate).HasColumnName(@"AddDate").HasColumnType("datetime").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("datetime").IsOptional();
            Property(x => x.ModifyDate).HasColumnName(@"ModifyDate").HasColumnType("datetime").IsOptional();
            Property(x => x.ModifyUser).HasColumnName(@"ModifyUser").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
        }
    }

    // TouchNetAddEmails
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class TouchNetAddEmailConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TouchNetAddEmail>
    {
        public TouchNetAddEmailConfiguration()
            : this("dbo")
        {
        }

        public TouchNetAddEmailConfiguration(string schema)
        {
            ToTable("TouchNetAddEmails", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Email).HasColumnName(@"email").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(150);
        }
    }

    // UserProfile
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class UserProfileConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<UserProfile>
    {
        public UserProfileConfiguration()
            : this("dbo")
        {
        }

        public UserProfileConfiguration(string schema)
        {
            ToTable("UserProfile", schema);
            HasKey(x => x.UserId);

            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("nvarchar").IsRequired().HasMaxLength(56);
        }
    }

    #endregion

}
// </auto-generated>

